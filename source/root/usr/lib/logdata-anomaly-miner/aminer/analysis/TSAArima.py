"""This module is a detector for testing purposes of the ETD"""

# ToDo:
# x) Update-Function
# x) No generation of the time window

import time

from aminer import AMinerConfig
from aminer.AnalysisChild import AnalysisContext
from aminer.events import EventSourceInterface
from aminer.input import AtomHandlerInterface
from aminer.util import TimeTriggeredComponentInterface
from aminer.util import PersistencyUtil

import statsmodels.api as sm_api
import numpy as np
from scipy.signal import savgol_filter
import pytz
import pmdarima as pm

class TSAArima(AtomHandlerInterface, TimeTriggeredComponentInterface, EventSourceInterface):
    """This class is used for testing purposes"""

    def __init__(self, aminer_config, anomaly_event_handlers, event_type_detector, persistence_id='Default'):

        # event_type_detector. Used to get the eventNumbers and values of the variables, etc.
        self.event_type_detector = event_type_detector
        # Add the varTypeDetector to the list of the modules, which use the event_type_detector.
        self.event_type_detector.add_following_modules(self)
        # Significance level of the estimatedd values
        self.alpha = 0.05
        # List of the time steps
        self.time_step_list = []
        # Number of division of the time window to calculate the time step
        self.num_division_time_step = 10
        # History of the time windows
        self.time_window_history = []
        # List of the the single arima_models
        self.arima_models = []

        self.plots = [[], [], []]
        self.fast = True # True for update, False for new calculation every step
        self.sum = True # Build the sum of the single windows
        return

    def receive_atom(self, log_atom):
        if not self.event_type_detector.total_records % 100:
            print(self.event_type_detector.total_records)
        return True

    def get_time_trigger_class(self):
        """Get the trigger class this component can be registered for. This detector only needs persisteny triggers in real time."""
        return AnalysisContext.TIME_TRIGGER_CLASS_REALTIME

    def do_timer(self, trigger_time):
        """Checks if current ruleset should be persisted"""
        return 600

    def do_persist(self):
        """Immediately write persistence data to storage."""  # No support for empirical distributions !!!
        return

    def allowlist_event(self, event_type, sorted_log_lines, event_data, allowlisting_data):
        """
        Allowlist an event generated by this source using the information emitted when generating the event.
        @return a message with information about allowlisting
        @throws Exception when allowlisting of this special event using given allowlisting_data was not possible.
        """
        if event_type != 'Analysis.%s' % self.__class__.__name__:
            raise Exception('Event not from this source')
        raise Exception('No allowlisting for algorithm malfunction or configuration errors')

    def calculate_time_steps(self, counts):
        """Returns a list of the timestep lenghts in seconds, if no timestep should be created the value is set to -1"""
        # List of the resulting time_steps
        time_step_list = []
        # Initialize time_window_history and arima_models
        self.time_window_history = [[] for _ in range(len(counts))]
        self.arima_models = [None for _ in range(len(counts))]
        # Minimal size of the time step
        min_lag = max(int(0.2*self.event_type_detector.num_sections_waiting_time_for_TSA),1)
        for data in counts:
            # Apply the autocorrelation function to the data of the single event types.
            corr = list(map(abs, sm_api.tsa.acf(data, nlags=len(data), fft=True)[min_lag:]))
            corr = np.array(corr)
            # Apply the Savitzky-Golay-Filter to the list corr, to smooth the curve and get better results
            corrfit = savgol_filter(corr, min(max(3,int(len(corr)/10)-int(int(len(corr)/10) % 2 == 0)), 101), 1)
            
            # Find the highest peak and set the time-step as the index + lag
            highest_peak_index = np.argmax(corrfit)
            time_step_list.append((highest_peak_index + min_lag) / self.num_division_time_step)

        return time_step_list

    def test_num_appearance(self, event_number, count):
        """This function makes a one step prediction and raises an alert if the count do not match the expected appearance"""
        # Append the list of time_window_history and arima_models if it is to short
        if len(self.time_window_history) <= event_number:
            self.time_window_history += [[] for _ in range(event_number + 1 - len(self.time_window_history))]
            self.arima_models += [None for _ in range(event_number + 1 - len(self.arima_models))]

        # Initialize the arima_model if needed
        if self.arima_models[event_number] == None:

            # Add the new count to the history and shorten it, if neccessary
            self.time_window_history[event_number].append(count)
            if len(self.time_window_history[event_number]) > 20 * self.num_division_time_step:
                self.time_window_history[event_number] = self.time_window_history[event_number][-10*self.num_division_time_step:]
                print(len(self.time_window_history[event_number]))

            # Check if enough values have been stored to initialize the arima_model
            if self.arima_models[event_number] == None and len(self.time_window_history[event_number]) >= 10*self.num_division_time_step:
                print('Ini:')
                print(self.time_window_history[event_number])
                
                if self.fast:
                    if not self.sum:
                        # Add the arima_model to the list
                        try:
                            model = pm.auto_arima(self.time_window_history[event_number][-10*self.num_division_time_step:],
                                    seasonal=True, error_action='ignore', suppress_warnings=True, m=self.num_division_time_step, max_order=2)
                            self.arima_models[event_number] = model.fit(self.time_window_history[event_number][-10*self.num_division_time_step:])
                            self.time_window_history[event_number] = []
                        except:
                            self.arima_models[event_number] = None
                    else:
                        # Add the arima_model to the list
                        try:
                            model = pm.auto_arima([sum(self.time_window_history[event_number][-10*self.num_division_time_step+i:-9*self.num_division_time_step+i]) for i in range(9*self.num_division_time_step)]+[sum(self.time_window_history[event_number][-self.num_division_time_step:])],
                                    seasonal=False, error_action='ignore', suppress_warnings=True, max_order=2)
                            self.arima_models[event_number] = model.fit([sum(self.time_window_history[event_number][-10*self.num_division_time_step+i:-9*self.num_division_time_step+i]) for i in range(9*self.num_division_time_step)]+[sum(self.time_window_history[event_number][-self.num_division_time_step:])])
                        except:
                            self.arima_models[event_number] = None
                else:
                    try:
                        model = pm.auto_arima(self.time_window_history[event_number][-10*self.num_division_time_step:-1],
                                seasonal=True, error_action='ignore', suppress_warnings=True, m=self.num_division_time_step)
                        fit_model = model.fit(self.time_window_history[event_number][-10*self.num_division_time_step:-1])
                        prediction = fit_model.predict(n_periods=1, return_conf_int=True, alpha=self.alpha)
                        pred, lower, upper = prediction[0][0], prediction[1][0][0], prediction[1][0][1]
                        self.plots[0].append(lower)
                        self.plots[1].append(count)
                        self.plots[2].append(upper)
                    except:
                        self.arima_models[event_number] = None
        # Add the new value and make a one step prediction
        else:
            if not self.sum:
                pred, lower, upper = self.one_step_prediction(event_number)
                self.plots[0].append(lower)
                self.plots[1].append(count)
                self.plots[2].append(upper)

                # Test if count is in boundaries
                print('EventNumber: %s, Count: %s, Lower: %s, Pred: %s, Upper: %s'%(event_number, count, lower, pred, upper))

                # Update the model, for the next step
                self.arima_models[event_number].update([count])
            else:
                # Add the new count to the history and shorten it, if neccessary
                self.time_window_history[event_number].append(count)

                pred, lower, upper = self.one_step_prediction(event_number)
                self.plots[0].append(lower)
                self.plots[1].append(sum(self.time_window_history[event_number][-self.num_division_time_step:]))
                self.plots[2].append(upper)

                # Test if count is in boundaries
                print('EventNumber: %s, Count: %s, Lower: %s, Pred: %s, Upper: %s'%(event_number, sum(self.time_window_history[event_number][-self.num_division_time_step:]), lower, pred, upper))

                # Update the model, for the next step
                self.arima_models[event_number].update([sum(self.time_window_history[event_number][-self.num_division_time_step:])])

    def one_step_prediction(self, event_number):
        prediction = self.arima_models[event_number].predict(n_periods=1, return_conf_int=True, alpha=self.alpha)
        # return in the order: pred, lower, upper
        return prediction[0][0], prediction[1][0][0], prediction[1][0][1]
